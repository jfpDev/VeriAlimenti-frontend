'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var history = require('history');
var store = _interopDefault(require('store2'));

var HISTORY_STORAGE_KEY = '@@HISTORY_STORAGE';

var loadHistory = function loadHistory(location) {
    var _ref = store.session.get(HISTORY_STORAGE_KEY) || {},
        entries = _ref.entries,
        index = _ref.index;

    if (!Array.isArray(entries) || !location.key) {
        return {
            tabKey: location.key || '',
            entries: [location],
            index: 0
        };
    }
    return { tabKey: location.key || "", entries: entries, index: index };
};

var saveHistory = function saveHistory(tabKey, _ref2) {
    var entries = _ref2.entries,
        index = _ref2.index;

    store.session.set(HISTORY_STORAGE_KEY, { entries: entries, index: index });
};

var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var BrowserHistoryWithEntries = function BrowserHistoryWithEntries() {
	var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	var browserHistory = history.createBrowserHistory(options);

	var _loadHistory = loadHistory(browserHistory.location),
	    tabKey = _loadHistory.tabKey,
	    entries = _loadHistory.entries,
	    index = _loadHistory.index;

	browserHistory.listen(function (newLocation, action) {
		if (!tabKey && newLocation.key) {
			tabKey = !newLocation.key ? "" : newLocation.key;
		}

		switch (action) {
			case 'POP':
				index = entries.findIndex(function (location) {
					return location.key === newLocation.key;
				});
				break;

			case 'REPLACE':
				entries[index] = Object.assign({}, newLocation);
				break;

			case 'PUSH':
				entries = [].concat(toConsumableArray(entries.slice(0, index + 1)), [newLocation]);
				index += 1;
				break;
		}
		saveHistory(tabKey, Object.assign({}, { index: index, entries: entries }));
		proxy.index = index;
		proxy.entries = entries;
		proxy.location = Object.assign({}, newLocation);
		proxy.action = action;
	});
	var proxy = Object.assign({}, browserHistory, { index: index, entries: entries });
	return proxy;
};

exports.BrowserHistoryWithEntries = BrowserHistoryWithEntries;
